import numpy as np
import random
import matplotlib.pyplot as plt
import sys
import os
import math

def eggholder(X):
    # X is a np.array
    return (-(X[1] + 47) * np.sin(np.sqrt(abs(X[0]/2 + (X[1] + 47)))) - X[0] * np.sin(np.sqrt(abs(X[0] - (X[1] + 47)))))

def holdertable(X):
    return(-(math.fabs(math.sin(X[0])*math.cos(X[1])*math.exp(math.fabs(1-((math.sqrt((X[0]*X[0])+(X[1]*X[1])))/math.pi))))))

def DifferentialEvolution(fun, bounds: int, populationSize: int, generations: int):
    # CONSTANTS as defined by the question

    dimensionSize = 2  # (x, y)
    crossoverProbability = 0.8
    K = 0.5
    generations_AvgFitness = []
    generations_GlobMinFitness = []

    # Initialize random parents

    parents = [np.array([random.uniform(bounds[j][0], bounds[j][1])
                        for j in range(dimensionSize)]) for i in range(populationSize)]

    generationNumber = 0
    while (generationNumber < generations):
        generationNumber += 1
        children = []  # The new children will be added here
        # Our F is to be randomly generated every generation
        F = random.uniform(-2.0, 2.0)

        for index, vector in enumerate(parents):
            # Remove the parent vector so that R1, R2 and R3 won't be selected as the parent vector
            pruned_parents = parents.copy()
            pruned_parents.pop(index)
            # This while loop exists only if the Vector_Trial is out of bounds (i.e. not between (-512, 512))
            while (True):
                Vector_R1, Vector_R2, Vector_R3 = random.sample(
                    pruned_parents, 3)
                #  Mutant Vector
                Vector_Mutant = vector + K * \
                    (Vector_R1 - vector) + F * (Vector_R2 - Vector_R3)
                # Trial Vector
                Vector_Trial = np.array([0.0 for i in range(dimensionSize)])
                # Crossover
                for gene in range(dimensionSize):
                    crossoverRealtime = random.random()
                    if crossoverRealtime < crossoverProbability:
                        Vector_Trial[gene] = Vector_Mutant[gene]
                    else:
                        Vector_Trial[gene] = vector[gene]
                # Check if the Trial Vector is in bounds (i.e. between (-512, 512))
                flagInBounds = True
                for i in range(dimensionSize):
                    if not ((bounds[i][0] < Vector_Trial[i]) and (Vector_Trial[i] < bounds[i][1])):
                        flagInBounds = False
                        break
                # Elitism: Get the better vector w.r.t. fitness
                if flagInBounds:
                    if fun(Vector_Trial) < fun(vector):
                        children.append(Vector_Trial)
                    else:
                        children.append(vector)
                    break

        # Calculate values for plotting

        parents_values = [(fun(i), i) for i in parents]
        parents_values.sort()
        generations_GlobMinFitness.append(parents_values[0][0])
        average = 0
        for child in parents_values:
            average += child[0]

        generations_AvgFitness.append(average/populationSize)
        parents = children.copy()

    plt.cla()
    plt.plot(generations_GlobMinFitness, color='green',
             linestyle='-', label="Global Minimum")
    plt.plot(generations_AvgFitness, color='blue',
             linestyle='-', label="Average")
    plt.title("Population: " + str(populationSize) + " | Generations : " + str(generations) + " | Global Minimum: " + str(generations_GlobMinFitness[len(generations_GlobMinFitness)-1]),
              fontdict={'fontsize': 8})
    plt.legend()
    plt.locator_params(axis='y', nbins=10)
    plt.xlabel("Generation")
    plt.ylabel("Fitness")

    if fun == eggholder:
        plt.savefig("Eggholder-Pop_"+str(populationSize) + "_Gens_" +str(generations)+".png", dpi=500)
    elif fun == holdertable:
        plt.savefig("Holdertable-Pop_"+str(populationSize) + "_Gens_"+str(generations)+".png", dpi=500)

if __name__ == '__main__':

    #print ("For Eggholder fun enter 1 and For Tableholder fun enter 2 ")
    num = input(
        "Press 0 for Eggholder\nOR\n1 for Holdertable: ")
    populationSize = [20, 50, 100, 200]
    generations = [50, 100, 200]
    if int(num) == 0:
        fun = eggholder

    elif int(num) == 1:
        fun = holdertable

    else:
        print("\n please enter either 0 or 1")
        sys.exit(0)

    for generation in generations:
        for population in populationSize:
            if fun == eggholder:
                DifferentialEvolution(
                    fun, [(-512, 512), (-512, 512)], population, generation)

            elif fun == holdertable:
                DifferentialEvolution(
                    fun, [(-10, 10), (-10, 10)], population, generation)

            else:
                print("error")
                sys.exit(0)
    print("\nprogram completed successfully\n"
